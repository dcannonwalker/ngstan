// Generated by rstantools.  Do not edit by hand.

/*
    ngstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ngstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ngstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_dte_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 68> locations_array__ =
  {" (found before start of program)",
  " (in 'dte', line 26, column 4 to column 28)",
  " (in 'dte', line 27, column 4 to column 17)",
  " (in 'dte', line 28, column 4 to column 19)",
  " (in 'dte', line 29, column 4 to column 29)",
  " (in 'dte', line 30, column 4 to column 25)",
  " (in 'dte', line 33, column 4 to column 26)",
  " (in 'dte', line 59, column 4 to column 40)",
  " (in 'dte', line 36, column 19 to column 20)",
  " (in 'dte', line 36, column 12 to column 42)",
  " (in 'dte', line 37, column 12 to column 44)",
  " (in 'dte', line 38, column 12 to column 49)",
  " (in 'dte', line 40, column 16 to column 32)",
  " (in 'dte', line 41, column 16 to column 68)",
  " (in 'dte', line 42, column 16 to line 43, column 57)",
  " (in 'dte', line 39, column 29 to line 44, column 13)",
  " (in 'dte', line 39, column 12 to line 44, column 13)",
  " (in 'dte', line 35, column 23 to line 45, column 9)",
  " (in 'dte', line 35, column 8 to line 45, column 9)",
  " (in 'dte', line 34, column 19 to line 46, column 5)",
  " (in 'dte', line 34, column 4 to line 46, column 5)",
  " (in 'dte', line 61, column 8 to column 65)",
  " (in 'dte', line 60, column 19 to line 62, column 5)",
  " (in 'dte', line 60, column 4 to line 62, column 5)",
  " (in 'dte', line 49, column 4 to column 28)",
  " (in 'dte', line 50, column 4 to column 37)",
  " (in 'dte', line 51, column 4 to column 23)",
  " (in 'dte', line 53, column 8 to column 33)",
  " (in 'dte', line 54, column 8 to column 35)",
  " (in 'dte', line 55, column 8 to column 37)",
  " (in 'dte', line 52, column 19 to line 56, column 5)",
  " (in 'dte', line 52, column 4 to line 56, column 5)",
  " (in 'dte', line 3, column 4 to column 19)",
  " (in 'dte', line 4, column 4 to column 21)",
  " (in 'dte', line 5, column 4 to column 19)",
  " (in 'dte', line 6, column 4 to column 19)",
  " (in 'dte', line 7, column 19 to column 26)",
  " (in 'dte', line 7, column 4 to column 28)",
  " (in 'dte', line 9, column 11 to column 14)",
  " (in 'dte', line 9, column 16 to column 17)",
  " (in 'dte', line 9, column 4 to column 23)",
  " (in 'dte', line 10, column 11 to column 14)",
  " (in 'dte', line 10, column 16 to column 17)",
  " (in 'dte', line 10, column 4 to column 23)",
  " (in 'dte', line 11, column 4 to column 22)",
  " (in 'dte', line 12, column 4 to column 22)",
  " (in 'dte', line 13, column 25 to column 26)",
  " (in 'dte', line 13, column 4 to column 28)",
  " (in 'dte', line 14, column 25 to column 26)",
  " (in 'dte', line 14, column 4 to column 28)",
  " (in 'dte', line 15, column 26 to column 27)",
  " (in 'dte', line 15, column 4 to column 29)",
  " (in 'dte', line 16, column 25 to column 26)",
  " (in 'dte', line 16, column 4 to column 28)",
  " (in 'dte', line 20, column 10 to column 11)",
  " (in 'dte', line 20, column 13 to column 16)",
  " (in 'dte', line 20, column 4 to column 35)",
  " (in 'dte', line 22, column 8 to column 46)",
  " (in 'dte', line 21, column 19 to line 23, column 5)",
  " (in 'dte', line 21, column 4 to line 23, column 5)",
  " (in 'dte', line 26, column 10 to column 11)",
  " (in 'dte', line 26, column 20 to column 21)",
  " (in 'dte', line 27, column 11 to column 12)",
  " (in 'dte', line 28, column 11 to column 12)",
  " (in 'dte', line 30, column 10 to column 11)",
  " (in 'dte', line 30, column 20 to column 21)",
  " (in 'dte', line 33, column 10 to column 11)",
  " (in 'dte', line 59, column 10 to column 11)"};
#include <stan_meta_header.hpp>
class model_dte final : public model_base_crtp<model_dte> {
private:
  int G;
  int N_g;
  int K;
  int U;
  std::vector<int> y;
  Eigen::Matrix<double,-1,-1> X_g_data__;
  Eigen::Matrix<double,-1,-1> Z_g_data__;
  double a_p;
  double b_p;
  std::vector<double> a_sig2;
  std::vector<double> b_sig2;
  std::vector<double> sig2_mu;
  std::vector<double> sig2_u;
  std::vector<std::vector<int>> y_g;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_g{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Z_g{nullptr, 0, 0};
public:
  ~model_dte() {}
  model_dte(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_dte_namespace::model_dte";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 32;
      context__.validate_dims("data initialization", "G", "int",
        std::vector<size_t>{});
      G = std::numeric_limits<int>::min();
      current_statement__ = 32;
      G = context__.vals_i("G")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "G", G, 1);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "N_g", "int",
        std::vector<size_t>{});
      N_g = std::numeric_limits<int>::min();
      current_statement__ = 33;
      N_g = context__.vals_i("N_g")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "N_g", N_g, 1);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 34;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "U", "int",
        std::vector<size_t>{});
      U = std::numeric_limits<int>::min();
      current_statement__ = 35;
      U = context__.vals_i("U")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "U", U, 0);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("y", "N_g * G", (N_g * G));
      current_statement__ = 37;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>((N_g * G))});
      y = std::vector<int>((N_g * G), std::numeric_limits<int>::min());
      current_statement__ = 37;
      y = context__.vals_i("y");
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("X_g", "N_g", N_g);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("X_g", "K", K);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "X_g", "double",
        std::vector<size_t>{static_cast<size_t>(N_g), static_cast<size_t>(K)});
      X_g_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_g, K,
                     std::numeric_limits<double>::quiet_NaN());
      new (&X_g) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_g_data__.data(),
        N_g, K);
      {
        std::vector<local_scalar_t__> X_g_flat__;
        current_statement__ = 40;
        X_g_flat__ = context__.vals_r("X_g");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 40;
          for (int sym2__ = 1; sym2__ <= N_g; ++sym2__) {
            current_statement__ = 40;
            stan::model::assign(X_g, X_g_flat__[(pos__ - 1)],
              "assigning variable X_g", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 40;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 41;
      stan::math::validate_non_negative_index("Z_g", "N_g", N_g);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("Z_g", "U", U);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "Z_g", "double",
        std::vector<size_t>{static_cast<size_t>(N_g), static_cast<size_t>(U)});
      Z_g_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_g, U,
                     std::numeric_limits<double>::quiet_NaN());
      new (&Z_g) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Z_g_data__.data(),
        N_g, U);
      {
        std::vector<local_scalar_t__> Z_g_flat__;
        current_statement__ = 43;
        Z_g_flat__ = context__.vals_r("Z_g");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= U; ++sym1__) {
          current_statement__ = 43;
          for (int sym2__ = 1; sym2__ <= N_g; ++sym2__) {
            current_statement__ = 43;
            stan::model::assign(Z_g, Z_g_flat__[(pos__ - 1)],
              "assigning variable Z_g", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 43;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 44;
      context__.validate_dims("data initialization", "a_p", "double",
        std::vector<size_t>{});
      a_p = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      a_p = context__.vals_r("a_p")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "a_p", a_p, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "b_p", "double",
        std::vector<size_t>{});
      b_p = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      b_p = context__.vals_r("b_p")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "b_p", b_p, 0);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("a_sig2", "K", K);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "a_sig2", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      a_sig2 = std::vector<double>(K,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 47;
      a_sig2 = context__.vals_r("a_sig2");
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "a_sig2", a_sig2, 0);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("b_sig2", "K", K);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "b_sig2", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      b_sig2 = std::vector<double>(K,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 49;
      b_sig2 = context__.vals_r("b_sig2");
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "b_sig2", b_sig2, 0);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("sig2_mu", "K", K);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "sig2_mu", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      sig2_mu = std::vector<double>(K,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 51;
      sig2_mu = context__.vals_r("sig2_mu");
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "sig2_mu", sig2_mu, 0);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("sig2_u", "U", U);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "sig2_u", "double",
        std::vector<size_t>{static_cast<size_t>(U)});
      sig2_u = std::vector<double>(U,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 53;
      sig2_u = context__.vals_r("sig2_u");
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "sig2_u", sig2_u, 0);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("y_g", "G", G);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("y_g", "N_g", N_g);
      current_statement__ = 56;
      y_g = std::vector<std::vector<int>>(G,
              std::vector<int>(N_g, std::numeric_limits<int>::min()));
      current_statement__ = 59;
      for (int g = 1; g <= G; ++g) {
        current_statement__ = 57;
        stan::model::assign(y_g,
          stan::model::rvalue(y, "y",
            stan::model::index_min_max(((N_g * (g - 1)) + 1), (N_g * g))),
          "assigning variable y_g", stan::model::index_uni(g));
      }
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "y_g", y_g, 0);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("beta", "G", G);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("mu", "K", K);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("sig2", "K", K);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("u", "G", G);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("u", "U", U);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("lp", "G", G);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("p_g", "G", G);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (G * K) + K + K + 1 + (G * U);
  }
  inline std::string model_name() const final {
    return "model_dte";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_dte_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(G,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 1;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(G, K);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> sig2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      sig2 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 4;
      p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
            1, lp__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> u =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(G,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(U, DUMMY_VAR__));
      current_statement__ = 5;
      u = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(G, U);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> lp =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(G,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 20;
      for (int g = 1; g <= G; ++g) {
        current_statement__ = 18;
        for (int D = 0; D <= 1; ++D) {
          current_statement__ = 8;
          stan::math::validate_non_negative_index("beta_star", "K", K);
          Eigen::Matrix<local_scalar_t__,-1,1> beta_star =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
          current_statement__ = 9;
          stan::model::assign(beta_star,
            stan::model::rvalue(beta, "beta", stan::model::index_uni(g)),
            "assigning variable beta_star");
          current_statement__ = 10;
          stan::model::assign(beta_star,
            (stan::model::rvalue(beta_star, "beta_star",
               stan::model::index_uni(K)) * D),
            "assigning variable beta_star", stan::model::index_uni(K));
          current_statement__ = 11;
          stan::model::assign(lp, stan::math::bernoulli_lpmf<false>(D, p),
            "assigning variable lp", stan::model::index_uni(g),
            stan::model::index_uni((D + 1)));
          current_statement__ = 16;
          for (int i = 1; i <= N_g; ++i) {
            local_scalar_t__ log_lambda = DUMMY_VAR__;
            current_statement__ = 13;
            log_lambda = (stan::math::multiply(
                            stan::model::rvalue(X_g, "X_g",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), beta_star)
              +
              stan::math::multiply(
                stan::model::rvalue(Z_g, "Z_g", stan::model::index_uni(i),
                  stan::model::index_omni()),
                stan::model::rvalue(u, "u", stan::model::index_uni(g))));
            current_statement__ = 14;
            stan::model::assign(lp,
              (stan::model::rvalue(
                 stan::model::rvalue(lp, "lp", stan::model::index_uni(g)),
                 "lp[g]", stan::model::index_uni((D + 1))) +
              stan::math::poisson_log_lpmf<false>(
                stan::model::rvalue(
                  stan::model::rvalue(y_g, "y_g", stan::model::index_uni(g)),
                  "y_g[g]", stan::model::index_uni(i)), log_lambda)),
              "assigning variable lp", stan::model::index_uni(g),
              stan::model::index_uni((D + 1)));
          }
        }
      }
      {
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, sig2_mu));
        current_statement__ = 25;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sig2, a_sig2,
                         b_sig2));
        current_statement__ = 26;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p, a_p, b_p));
        current_statement__ = 31;
        for (int g = 1; g <= G; ++g) {
          current_statement__ = 27;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(u, "u",
                             stan::model::index_uni(g)), 0, sig2_u));
          current_statement__ = 28;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(g)), mu, sig2));
          current_statement__ = 29;
          lp_accum__.add(stan::math::log_sum_exp(
                           stan::model::rvalue(lp, "lp",
                             stan::model::index_uni(g))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_dte_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,1>> beta =
        std::vector<Eigen::Matrix<double,-1,1>>(G,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(G, K);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> sig2 =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sig2 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      double p = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
            1, lp__);
      std::vector<Eigen::Matrix<double,-1,1>> u =
        std::vector<Eigen::Matrix<double,-1,1>>(G,
          Eigen::Matrix<double,-1,1>::Constant(U,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      u = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(G, U);
      std::vector<Eigen::Matrix<double,-1,1>> lp =
        std::vector<Eigen::Matrix<double,-1,1>>(G,
          Eigen::Matrix<double,-1,1>::Constant(2,
            std::numeric_limits<double>::quiet_NaN()));
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
          out__.write(beta[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(mu);
      out__.write(sig2);
      out__.write(p);
      for (int sym1__ = 1; sym1__ <= U; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
          out__.write(u[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 20;
      for (int g = 1; g <= G; ++g) {
        current_statement__ = 18;
        for (int D = 0; D <= 1; ++D) {
          current_statement__ = 8;
          stan::math::validate_non_negative_index("beta_star", "K", K);
          Eigen::Matrix<double,-1,1> beta_star =
            Eigen::Matrix<double,-1,1>::Constant(K,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 9;
          stan::model::assign(beta_star,
            stan::model::rvalue(beta, "beta", stan::model::index_uni(g)),
            "assigning variable beta_star");
          current_statement__ = 10;
          stan::model::assign(beta_star,
            (stan::model::rvalue(beta_star, "beta_star",
               stan::model::index_uni(K)) * D),
            "assigning variable beta_star", stan::model::index_uni(K));
          current_statement__ = 11;
          stan::model::assign(lp, stan::math::bernoulli_lpmf<false>(D, p),
            "assigning variable lp", stan::model::index_uni(g),
            stan::model::index_uni((D + 1)));
          current_statement__ = 16;
          for (int i = 1; i <= N_g; ++i) {
            double log_lambda = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 13;
            log_lambda = (stan::math::multiply(
                            stan::model::rvalue(X_g, "X_g",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), beta_star)
              +
              stan::math::multiply(
                stan::model::rvalue(Z_g, "Z_g", stan::model::index_uni(i),
                  stan::model::index_omni()),
                stan::model::rvalue(u, "u", stan::model::index_uni(g))));
            current_statement__ = 14;
            stan::model::assign(lp,
              (stan::model::rvalue(
                 stan::model::rvalue(lp, "lp", stan::model::index_uni(g)),
                 "lp[g]", stan::model::index_uni((D + 1))) +
              stan::math::poisson_log_lpmf<false>(
                stan::model::rvalue(
                  stan::model::rvalue(y_g, "y_g", stan::model::index_uni(g)),
                  "y_g[g]", stan::model::index_uni(i)), log_lambda)),
              "assigning variable lp", stan::model::index_uni(g),
              stan::model::index_uni((D + 1)));
          }
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
            out__.write(lp[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> p_g =
        std::vector<double>(G, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      for (int g = 1; g <= G; ++g) {
        current_statement__ = 21;
        stan::model::assign(p_g,
          stan::math::pow((1 +
            ((stan::math::exp(
                (stan::model::rvalue(
                   stan::model::rvalue(lp, "lp", stan::model::index_uni(g)),
                   "lp[g]", stan::model::index_uni(1)) -
                stan::model::rvalue(
                  stan::model::rvalue(lp, "lp", stan::model::index_uni(g)),
                  "lp[g]", stan::model::index_uni(2)))) * (1 - p)) / p)), -1),
          "assigning variable p_g", stan::model::index_uni(g));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "p_g", p_g, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "p_g", p_g, 1);
      out__.write(p_g);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(G,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(beta, in__.read<local_scalar_t__>(),
            "assigning variable beta", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable mu");
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> sig2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(sig2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable sig2");
      out__.write(sig2);
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 4;
      p = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, p);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> u =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(G,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(U, DUMMY_VAR__));
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= U; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
          current_statement__ = 5;
          stan::model::assign(u, in__.read<local_scalar_t__>(),
            "assigning variable u", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(u);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(G), static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sig2", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "p", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "u", "double",
        std::vector<size_t>{static_cast<size_t>(G), static_cast<size_t>(U)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(G,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(beta, beta_flat__[(pos__ - 1)],
              "assigning variable beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 2;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> sig2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sig2_flat__;
        current_statement__ = 3;
        sig2_flat__ = context__.vals_r("sig2");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(sig2, sig2_flat__[(pos__ - 1)],
            "assigning variable sig2", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(sig2);
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 4;
      p = context__.vals_r("p")[(1 - 1)];
      out__.write_free_lub(0, 1, p);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> u =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(G,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(U, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 5;
        u_flat__ = context__.vals_r("u");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= U; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(u, u_flat__[(pos__ - 1)],
              "assigning variable u", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(u);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "mu", "sig2", "p", "u"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"lp"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"p_g"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(G),
                                                 static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(G),
                  static_cast<size_t>(U)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(G),
               static_cast<size_t>(2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(G)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sig2" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "p");
    for (int sym1__ = 1; sym1__ <= U; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
        param_names__.emplace_back(std::string() + "u" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_g" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sig2" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "p");
    for (int sym1__ = 1; sym1__ <= U; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
        param_names__.emplace_back(std::string() + "u" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= G; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_g" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sig2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(U) + "}},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"p_g\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sig2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(U) + "}},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"p_g\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((G * K) + K) + K) + 1) + (G * U));
    const size_t num_transformed = emit_transformed_parameters * ((G * 2));
    const size_t num_gen_quantities = emit_generated_quantities * (G);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((G * K) + K) + K) + 1) + (G * U));
    const size_t num_transformed = emit_transformed_parameters * ((G * 2));
    const size_t num_gen_quantities = emit_generated_quantities * (G);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_dte_namespace::model_dte;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_dte_namespace::profiles__;
}
#endif
#endif
